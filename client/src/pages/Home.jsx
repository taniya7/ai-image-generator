import React, { useState, useEffect } from "react";
import Loader from "../components/Loader";
import FormField from "../components/FormField";
import Card from "../components/Card";

function RenderGrid({ data }) {
  if (data.length > 0) {
    return data.map((post) => <Card key={post._id} {...post} />);
  }

  return (
    <h2 className="text-[#6469ff] text-xl font-bold mt-5 uppercase">
      No posts available!
    </h2>
  );
}

const Home = ({ setAlertMessage }) => {
  const [posts, setPosts] = useState([]);
  const [isLoading, setLoading] = useState(false);
  const [searchText, setSearchText] = useState("");
  const [searchPosts, setSearchPosts] = useState([]);
  const [searchTimeOut, setSearchTimeOut] = useState(null);

  function handleSearchChange(e) {
    clearTimeout(searchTimeOut);
    setSearchText(e.target.value);

    setSearchTimeOut(
      setTimeout(() => {
        const searchPost = posts.filter(
          (post) =>
            post.name.toLowerCase().includes(searchText.toLowerCase()) ||
            post.prompt.toLowerCase().includes(searchText.toLowerCase())
        );

        setSearchPosts(searchPost);
      }, 500)
    );
  }

  useEffect(() => {
    const fetchPosts = async () => {
      try {
        setLoading(true);

        const response = await fetch("http://localhost:8080/api/post", {
          method: "GET",
          headers: {
            "Content-Type": "application/json",
          },
        });

        const result = await response.json();

        if (result) {
          setPosts([...result.data].reverse());
          console.log("All posts rendered on Community : ", result);
        }
      } catch (error) {
        setAlertMessage("All posts could not render on Community!");
        console.log("All posts not rendered on Community : ", error);
      } finally {
        setLoading(false);
      }
    };

    fetchPosts();
  }, []);

  return (
    <>
      <section className="max-w-7xl mx-auto">
        {/* Heading and Subheading*/}
        <div>
          <h1 className="text-[34px] text-[#222328] font-extrabold">
            The Community Showcase
          </h1>
          <p className="text-[16px] text-[#666e75] mt-1">
            Browse through a collection of imaginative and visually stunning
            images generated by AI.
          </p>
        </div>

        {/* Search Field */}
        <div className="mt-12">
          <FormField
            labelName="Search"
            type="text"
            name="search"
            value={searchText}
            placeholder="Search image..."
            handleChange={handleSearchChange}
          />
        </div>

        {/* if cards are loading ? show <Loader/> : (1. searchText is present && "Showing results for..." 2. searchText is present ? Cards with 'posts' : Cards with 'searchPosts') */}
        <div className="mt-10">
          {isLoading ? (
            <Loader />
          ) : (
            <>
              {searchText && (
                <>
                  <h2 className="text-[#666e75] text-xl">
                    Showing results for{" "}
                    <span className="text-[#222328] font-bold">
                      {searchText}
                    </span>
                  </h2>
                </>
              )}

              <div className="grid lg:grid-cols-4 sm:grid-cols-3 grid-cols-1 gap-3">
                {searchText ? (
                  <RenderGrid data={searchPosts} />
                ) : (
                  <RenderGrid data={posts} />
                )}
              </div>
            </>
          )}
        </div>
      </section>
    </>
  );
};

export default Home;
